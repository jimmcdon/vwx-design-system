name: Security & Performance

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: |
          echo "Running pnpm audit..."
          pnpm audit --audit-level moderate
          
      - name: Check for known vulnerabilities
        run: |
          echo "Checking for known vulnerabilities..."
          # Create vulnerability report
          pnpm audit --json > security-audit.json || true
          
          # Check if there are any high/critical vulnerabilities
          CRITICAL=$(cat security-audit.json | jq '.metadata.vulnerabilities.critical // 0')
          HIGH=$(cat security-audit.json | jq '.metadata.vulnerabilities.high // 0')
          
          echo "Critical vulnerabilities: $CRITICAL"
          echo "High vulnerabilities: $HIGH"
          
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            echo "‚ùå Critical or high vulnerabilities found!"
            echo "Please fix these vulnerabilities before merging."
            exit 1
          else
            echo "‚úÖ No critical or high vulnerabilities found."
          fi

      - name: Upload security audit report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-audit-report
          path: security-audit.json
          retention-days: 30

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  performance-audit:
    name: Performance Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Start Storybook server
        run: |
          pnpm storybook &
          # Wait for Storybook to be ready
          npx wait-on http://localhost:6006 --timeout 60000
        
      - name: Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: lighthouse-reports
          path: .lighthouseci
          retention-days: 30

  bundle-size-check:
    name: Bundle Size Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Check bundle sizes
        run: |
          echo "üîç Analyzing bundle sizes..."
          pnpm analyze:bundle > bundle-report.txt 2>&1 || true
          
          # Check if bundle sizes are within limits
          if grep -q "‚ùå Failed:" bundle-report.txt; then
            echo "Bundle size limits exceeded!"
            cat bundle-report.txt
            exit 1
          else
            echo "‚úÖ All bundle sizes are within limits"
            cat bundle-report.txt
          fi

      - name: Comment bundle size results
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const fs = require('fs');
            const path = './bundle-report.txt';
            
            if (fs.existsSync(path)) {
              const report = fs.readFileSync(path, 'utf8');
              
              const comment = `## üì¶ Bundle Size Report
              
              \`\`\`
              ${report}
              \`\`\`
              
              Bundle size limits are defined in \`scripts/analyze-bundle.js\`.
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  accessibility-audit:
    name: Accessibility Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium

      - name: Start Storybook
        run: |
          pnpm storybook &
          npx wait-on http://localhost:6006 --timeout 60000

      - name: Run accessibility tests
        run: |
          pnpm test:e2e tests/e2e/accessibility.spec.ts
        continue-on-error: true

      - name: Upload accessibility results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: accessibility-results
          path: |
            playwright-report/
            test-results/
          retention-days: 30